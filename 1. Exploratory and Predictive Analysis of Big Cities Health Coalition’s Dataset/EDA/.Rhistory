top_n(5) %>%
ggplot(mapping=aes(x=bigram2, y=n)) +
geom_col() +
coord_flip() + facet_grid(. ~ bigram1, scales = 'free')
facet_wrap(~bigram1,scales= 'free', ncol=2) +
labs (y='Count Value', x= 'Bigrams (2nd-Word)')
trump_speeches <- tibble(line=1:length(trump_speeches), text=trump_speeches)
trump_speeches <- trump_speeches %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
trump_speeches %>%
filter(bigram1 %in% c("not", "no", "never", "without")) %>%
filter(!bigram2 %in% c(stop_words$word, "applause")) %>%
count(bigram1,bigram2,sort = 'TRUE') %>%
mutate(bigram2 = reorder(bigram2, n)) %>%
group_by(bigram1) %>%
top_n(5) %>%
ggplot(mapping=aes(x=bigram2, y=n)) +
geom_col() +
coord_flip() + facet_grid(. ~ bigram1, scales = 'free')
facet_wrap(~bigram1,scales= 'free', ncol=2) +
labs (y='Count Value', x= 'Bigrams (2nd-Word)')
trump_speeches %>%
filter(word1 %in% c("not", "no", "never", "without")) %>%
filter(!word2 %in% c(stop_words$word, "applause")) %>%
count(word1,word2,sort = 'TRUE') %>%
mutate(word2 = reorder(bigram2, n)) %>%
group_by(word1) %>%
top_n(5) %>%
ggplot(mapping=aes(x=bigram2, y=n)) +
geom_col() +
coord_flip() + facet_grid(. ~ word1, scales = 'free')
facet_wrap(~word1,scales= 'free', ncol=2) +
labs (y='Count Value', x= 'Bigrams (2nd-Word)')
trump_speeches
trump_speeches <- trump_speeches %>%
separate(bigram, c("word1", "word2"), sep = " ")
trump_speeches %>%
filter(word1 %in% c("not", "no", "never", "without")) %>%
filter(!word2 %in% c(stop_words$word, "applause")) %>%
count(word1,word2,sort = 'TRUE') %>%
mutate(word2 = reorder(word2, n)) %>%
group_by(word1) %>%
top_n(5) %>%
ggplot(mapping=aes(x=word2, y=n)) +
geom_col() +
coord_flip() + facet_grid(. ~ word1, scales = 'free')
facet_wrap(~word1,scales= 'free', ncol=2) +
labs (y='Count Value', x= 'Word 2')
trump_speeches %>%
filter(word1 %in% c("not", "no", "never", "without")) %>%
filter(!word2 %in% c(stop_words$word, "applause")) %>%
count(word1,word2,sort = 'TRUE') %>%
mutate(word2 = reorder(word2, n)) %>%
group_by(word1) %>%
top_n(5) %>%
ggplot(mapping=aes(x=word2, y=n)) +
geom_col() +
coord_flip() + facet_grid(. ~ word1, scales = 'free') +
facet_wrap(~word1,scales= 'free', ncol=2) +
labs (y='Count Value', x= 'Word2')
trump_speeches %>%
filter(word1 %in% c("not", "no", "never", "without")) %>%
filter(!word2 %in% c(stop_words$word, "applause")) %>%
count(word1,word2,sort = 'TRUE') %>%
mutate(word2 = reorder(word2, n)) %>%
group_by(word1) %>%
top_n(5)
trump_speeches <- read_lines("~/Documents/College_NEU/SPRING-20/DS-5110/R/trump_speeches/data/full_speech.txt")
trump_speeches <- trump_speeches %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
trump_speeches <- as_tibble(trump_speeches) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
trump_speeches <- read_lines("~/Documents/College_NEU/SPRING-20/DS-5110/R/trump_speeches/data/full_speech.txt")
trump_speeches <- as_tibble(trump_speeches) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
trump_speeches <- as_tibble(trump_speeches)
trump_speeches <- trump_speeches %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
raw_data <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds")
library(gutenbergr)
raw_data <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds")
raw_data
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenber_id)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds")
raw_data
names(gutenberg_id)
names(raw_data)
raw_data %>% select(gutenberg_id)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenberg_id)
books <- gutenberg_download(book_ids)
books
books <- gutenberg_download(book_ids) %>%
mutate(book_num = row_number())
books
tidy_books <- books %>%
unnest_tokens(word, text) %>%
group_by(word) %>%
filter(n() > 10) %>%
ungroup()
tidy_books
library(gutenbergr)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenberg_id)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenberg_id)
books <- gutenberg_download(book_ids) %>%
mutate(num = row_number())
tidy_books <- books %>%
unnest_tokens(word, text) %>%
group_by(word) %>%
filter(n() > 10) %>%
ungroup()
tidy_books
books_tidy_format %>%
anti_join(stop_words) %>%
count(title, word, sort=TRUE) %>%
mutate(word = reorder(word, n)) %>%
group_by(title) %>%
top_n(15) %>%
ggplot(aes(x=word, y=n)) +
geom_col() +
facet_wrap(~title, scales="free", ncol=2) +
coord_flip()
tidy_boks %>%
anti_join(stop_words) %>%
count(title, word, sort=TRUE) %>%
mutate(word = reorder(word, n)) %>%
group_by(title) %>%
top_n(15) %>%
ggplot(aes(x=word, y=n)) +
geom_col() +
facet_wrap(~title, scales="free", ncol=2) +
coord_flip()
tidy_books %>%
anti_join(stop_words) %>%
count(title, word, sort=TRUE) %>%
mutate(word = reorder(word, n)) %>%
group_by(title) %>%
top_n(15) %>%
ggplot(aes(x=word, y=n)) +
geom_col() +
facet_wrap(~title, scales="free", ncol=2) +
coord_flip()
tidy_books
tidy_books %>%
mutate(
title = ifelse(gutenberg_id == 36, "Pride and Prejudice", "The War of the Worlds")
)
tidy_books %>%
anti_join(stop_words) %>%
count(title, word, sort=TRUE) %>%
mutate(word = reorder(word, n)) %>%
group_by(title) %>%
top_n(15) %>%
ggplot(aes(x=word, y=n)) +
geom_col() +
facet_wrap(~title, scales="free", ncol=2) +
coord_flip()
tidy_books
tidy_books <- tidy_books %>%
mutate(
title = ifelse(gutenberg_id == 36, "Pride and Prejudice", "The War of the Worlds")
)
tidy_books %>%
anti_join(stop_words) %>%
count(title, word, sort=TRUE) %>%
mutate(word = reorder(word, n)) %>%
group_by(title) %>%
top_n(15) %>%
ggplot(aes(x=word, y=n)) +
geom_col() +
facet_wrap(~title, scales="free", ncol=2) +
coord_flip()
tidy_books <- tidy_books %>%
mutate(
title = ifelse(gutenberg_id == 36, "The War of the Worlds","Pride and Prejudice")
)
tidy_books %>%
anti_join(stop_words) %>%
count(title, word, sort=TRUE) %>%
mutate(word = reorder(word, n)) %>%
group_by(title) %>%
top_n(15) %>%
ggplot(aes(x=word, y=n)) +
geom_col() +
facet_wrap(~title, scales="free", ncol=2) +
coord_flip()
dtm_matrix <- tidy_books %>%
count(num, word) %>%
cast_dtm(num, word, n) %>% as.matrix()
dtm_matrix
head(authors)
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(document=as.integer(document)) %>%
left_join(books) %>%
mutate(author=as.factor(author)) %>%
select(num, author)
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(document=as.integer(document)) %>%
left_join(books) %>%
mutate(author=as.factor(author)) %>%
select(num, author)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenberg_id, authors)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenberg_id, author)
books <- gutenberg_download(book_ids) %>%
mutate(num = row_number())
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(document=as.integer(document)) %>%
left_join(books) %>%
mutate(author=as.factor(author)) %>%
select(num, author)
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(document=as.integer(document))
dtm_matrix <- tidy_books %>%
tibble(document=rownames(dtm_matrix)) %>%
mutate(document=as.integer(document))
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(document=as.integer(document)) %>%
left_join(books) %>%
mutate(author=as.factor(author)) %>%
select(num, author)
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(num=as.integer(document)) %>%
left_join(books) %>%
mutate(author=as.factor(author)) %>%
select(num, author)
names(books)
book_ids <- gutenberg_works() %>%
filter(title == "Pride and Prejudice" | title == "The War of the Worlds") %>%
select(gutenberg_id, author)
books <- gutenberg_download(book_ids) %>%
mutate(num = row_number())
book_ids
books
books <- books %>%
mutate(
author = ifelse(gutenberg_id == 36, "Wells, H. G. (Herbert George)","Austen, Jane")
)
authors <- tibble(document=rownames(dtm_matrix)) %>%
mutate(num=as.integer(document)) %>%
left_join(books) %>%
mutate(author=as.factor(author)) %>%
select(num, author)
head(authors)
authors_train <- dtm_matrix[train_ids,]
authors_train <- dtm_matrix[partition,]
authors_test <- dtm_matrix[-partition,]
partition <- createDataPartition(authors$author, p=0.75, list=FALSE)
library(modelr)
partition <- createDataPartition(authors$author, p=0.75, list=FALSE)
library(caret)
set.seed(1)
partition <- createDataPartition(authors$author, p=0.75, list=FALSE)
authors_train <- dtm_matrix[partition,]
authors_test <- dtm_matrix[-partition,]
ctrl <- trainControl(method="none")
svmFit <- train(x=book_authors_train,
y=book_authors$author[train_ids],
method="svmLinearWeights2",
trControl= ctrl,
tuneGrid=tibble(cost=1,
Loss=0,
weight=1))
svmFit <- train(x=authors_train,
y=authors$author[partition],
method="svmLinearWeights2",
trControl= ctrl,
tuneGrid=tibble(cost=1,
Loss=0,
weight=1))
confusionMatrix(
predict(svmFit, newdata=authors_test),
authors$author[-partition])
raw_data
names(bchi_tidy2)
library(tidyverse)
bchi <- read_csv("~/Documents/College_NEU/SPRING-20/DS-5110/Project/idmp-bchi/BCHI-dataset_2019-03-04.csv")
bchi <- bchi[1:7]
names(bchi)
# Tidying up the data
bchi <- bchi %>%
mutate(Num = row_number())
bchi
bchi_tidy <- bchi %>%
spread(Indicator, Value)
head(bchi_tidy)
# Removing Years 2017 and 2018
bchi_tidy2 <- bchi_tidy %>%
filter(!Year == '2017') %>%
filter(!Year == '2018')
setwd("~/Documents/College_NEU/SPRING-20/DS-5110/Project/idmp-bchi/EDA/")
library(tidyverse)
bchi <- read_csv("../Data/BCHI-dataset_2019-03-04.csv")
bchi <- bchi[1:7]
names(bchi)
# Tidying up the data
bchi <- bchi %>%
mutate(Num = row_number())
bchi
bchi_tidy <- bchi %>%
spread(Indicator, Value)
head(bchi_tidy)
# Removing Years 2017 and 2018
bchi_tidy2 <- bchi_tidy %>%
filter(!Year == '2017') %>%
filter(!Year == '2018')
bchi_tidy2 %>%
ggplot(aes(`Year`, `Heart Disease Mortality Rate (Age-Adjusted; Per 100,000 people)`)) + geom_col() + coord_flip()
library(tidyverse)
heart_data <- read_csv("../Data/heart.csv")
head(heart_data)
library(caret)
library(modelr)
library(mlbench)
fit1 <- lm(target ~ age, data=heart_data)
fit1 <- lm(target ~ age + cp +  trestbps + chol + fbs + thalach, data=heart_data)
ols_step_best_subset(fit1)
install.packages("olsrr")
ols_step_best_subset(fit1)
library(olsrr)
ols_step_best_subset(fit1)
ggplot(k)
k <- ols_step_best_subset(fit1)
ggplot(k)
plot(k)
# Choosing the right variables
fit1 <- lm(target ~ cp +  trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit1)
# Choosing the right variables
fit1 <- lm(target ~ age + cp +  trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit1)
plot(k)
fit2 <- lm(target ~ cp +  trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit1)
plot(k)
k
fit2 <- lm(target ~ cp +  trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit2)
plot(k)
k
plot(k)
fit2 <- lm(target ~ trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit2)
plot(k)
fit2 <- lm(target ~ cp + trestbps + chol + fbs + thalach + oldpeak, data=heart_data)
k <- ols_step_best_subset(fit2)
plot(k)
k
k <-  ols_step_best_subset(fit3)
plot(k)
#Adding oldpeak
fit3 <- lm(target ~ cp + trestbps + thalach + oldpeak)
k <-  ols_step_best_subset(fit3)
#Adding oldpeak
fit3 <- lm(target ~ cp + trestbps + thalach + oldpeak)
#Adding oldpeak
fit3 <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_data)
k <-  ols_step_best_subset(fit3)
plot(k)
heart_part <- resample_partition(heart_data, c(train = 0.8,
valid = 0.1,
test = 0.1))
heart_train <- as_tibble(heart_part$train)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_trian %>% add_residuals(fit_f) %>%
ggplot(aes(x=target, y=resid)) + geom_boxplot()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=target, y=resid)) + geom_boxplot()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=target, y=resid)) + geom_col()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=target, y=resid)) + geom_boxplot()
heart_data <- heart_data %>%
mutate(
target = as_factor(target)
)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=target, y=resid)) + geom_boxplot()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(group=target, y=resid)) + geom_boxplot()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_col()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_box()
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
heart_data <- heart_data %>%
mutate(
target = as_factor(target)
cp = as_factor(cp)
)
heart_data <- heart_data %>%
mutate(
target = as_factor(target),
cp = as_factor(cp)
)
heart_data
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
heart_train %>% add_residuals(fit_f)
heart_data <- read_csv("../Data/heart.csv")
heart_data <- heart_data %>%
mutate(
target = as_factor(target),
cp = as_factor(cp)
)
# Choosing the right variables
fit1 <- lm(target ~ age + cp +  trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit1)
plot(k)
fit2 <- lm(target ~ cp + trestbps + chol + fbs + thalach, data=heart_data)
k <- ols_step_best_subset(fit2)
plot(k)
#Adding oldpeak
fit3 <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_data)
k <-  ols_step_best_subset(fit3)
plot(k)
heart_part <- resample_partition(heart_data, c(train = 0.8,
valid = 0.1,
test = 0.1))
heart_train <- as_tibble(heart_part$train)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
heart_part <- resample_partition(heart_data, c(train = 0.8,
valid = 0.1,
test = 0.1))
heart_train <- as_tibble(heart_part$train)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_data <- heart_data %>%
mutate(
cp = as_factor(cp)
)
heart_part <- resample_partition(heart_data, c(train = 0.8,
valid = 0.1,
test = 0.1))
heart_train <- as_tibble(heart_part$train)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
heart_data <- heart_data
heart_part <- resample_partition(heart_data, c(train = 0.8,
valid = 0.1,
test = 0.1))
heart_train <- as_tibble(heart_part$train)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
heart_data
heart_data <- read_csv("../Data/heart.csv")
heart_data <- read_csv("../Data/heart.csv")
heart_data <- heart_data %>%
mutate(
cp = as_factor(cp)
)
heart_part <- resample_partition(heart_data, c(train = 0.8,
valid = 0.1,
test = 0.1))
heart_train <- as_tibble(heart_part$train)
fit_f <- lm(target ~ cp + trestbps + thalach + oldpeak, data=heart_train)
heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
p1 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=cp, y=resid)) + geom_boxplot()
p2 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=trestbps, y=resid)) + geom_boxplot()
p3 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=thalach, y=resid)) + geom_boxplot()
p4 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=oldpeak, y=resid)) + geom_boxplot()
grid.arrange(p1, p2, p3, p4 nrow = 2)
grid.arrange(p1, p2, p3, p4, nrow = 2)
ggarrange(p1, p2, p3, p4, ncol = 2,nrow = 2)
install.packages("ggpubr")
library(ggpubr)
ggarrange(p1, p2, p3, p4, ncol = 2,nrow = 2)
p2 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=trestbps, y=resid)) + geom_point(alpha=0.1)
p3 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=thalach, y=resid)) + geom_point(alpha=0.1)
p4 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=oldpeak, y=resid)) + geom_point(alpha=0.1)
ggarrange(p1, p2, p3, p4, ncol = 2,nrow = 2)
p2 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=trestbps, y=resid)) + geom_point()
p3 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=thalach, y=resid)) + geom_point()
p4 <- heart_train %>% add_residuals(fit_f) %>%
ggplot(aes(x=oldpeak, y=resid)) + geom_point()
ggarrange(p1, p2, p3, p4, ncol = 2,nrow = 2)
k <- ols_step_best_subset(fit1)
plot(k)
k
name(heart_data)
names(heart_data)
plot(k)
